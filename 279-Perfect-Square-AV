// C++ - Recursion+memoization
class Solution {
public:
    int dp[10001];
    int helper(int n){
        if(n==0){
            return 0;
        }
        if(dp[n] != -1){
            return dp[n];
        }
        int mincost = INT_MAX;
        for(int i=1; i*i<=n; i++){
            mincost = min(mincost, 1+helper(n-i*i));
        }
        return dp[n] = mincost;
    }
    int numSquares(int n) {
        memset(dp, -1, sizeof(dp));
        return helper(n);
    }
};

// Python 3
class Solution:
    def __init__(self):
        self.dp = [-1] * 10001  # Initialize memoization array

    def helper(self, n):
        if n == 0:
            return 0
        if self.dp[n] != -1:
            return self.dp[n]

        min_cost = float('inf')
        i = 1
        while i * i <= n:
            min_cost = min(min_cost, 1 + self.helper(n - i * i))
            i += 1

        self.dp[n] = min_cost
        return min_cost

    def numSquares(self, n: int) -> int:
        return self.helper(n)
